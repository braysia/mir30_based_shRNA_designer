import unittest
import os
from os.path import dirname
from os.path import join
from shrna_selection import AutomatedSirnaDesigner, pick_rna, CdsGetter, AddFifthOftheStrand, turn_u_to_t


cds_seq = 'ATGCGACCCTCAGGGACCGCGAGAACCACACTGCTGGTGTTGCTGACCGCGCTCTGCGCCGCAGGTGGGGCGTTGGAGGAAAAGAAAGTCTGCCAAGGCACAAGTAACAGGCTCACCCAACTGGGCACTTTTGAAGACCACTTTCTGAGCCTGCAGAGGATGTACAACAACTGTGAAGTGGTCCTTGGGAACTTGGAAATTACCTATGTGCAAAGGAATTACGACCTTTCCTTCTTAAAGACCATCCAGGAGGTGGCCGGCTATGTCCTCATTGCCCTCAACACCGTGGAGAGAATCCCTTTGGAGAACCTGCAGATCATCAGGGGAAATGCTCTTTATGAAAACACCTATGCCTTAGCCATCCTGTCCAACTATGGGACAAACAGAACTGGGCTTAGGGAACTGCCCATGCGGAACTTACAGGAAATCCTGATTGGTGCTGTGCGATTCAGCAACAACCCCATCCTCTGCAATATGGATACTATCCAGTGGAGGGACATCGTCCAAAACGTCTTTATGAGCAACATGTCAATGGACTTACAGAGCCATCCGAGCAGTTGCCCCAAATGTGATCCAAGCTGTCCCAATGGAAGCTGCTGGGGAGGAGGAGAGGAGAACTGCCAGAAATTGACCAAAATCATCTGTGCCCAGCAATGTTCCCATCGCTGTCGTGGCAGGTCCCCCAGTGACTGCTGCCACAACCAATGTGCTGCGGGGTGTACAGGGCCCCGAGAGAGTGACTGTCTGGTCTGCCAAAAGTTCCAAGATGAGGCCACATGCAAAGACACCTGCCCACCACTCATGCTGTACAACCCCACCACCTATCAGATGGATGTCAACCCTGAAGGGAAGTACAGCTTTGGTGCCACCTGTGTGAAGAAGTGCCCCCGAAACTACGTGGTGACAGATCATGGCTCATGTGTCCGAGCCTGTGGGCCTGACTACTACGAAGTGGAAGAAGATGGCATCCGCAAGTGTAAAAAATGTGATGGGCCCTGTCGCAAAGTTTGTAATGGCATAGGCATTGGTGAATTTAAAGACACACTCTCCATAAATGCTACAAACATCAAACACTTCAAATACTGCACTGCCATCAGCGGGGACCTTCACATCCTGCCAGTGGCCTTTAAGGGGGATTCTTTCACGCGCACTCCTCCTCTAGACCCACGAGAACTAGAAATTCTAAAAACCGTAAAGGAAATAACAGGCTTTTTGCTGATTCAGGCTTGGCCTGATAACTGGACTGACCTCCATGCTTTCGAGAACCTAGAAATAATACGTGGCAGAACAAAGCAACATGGTCAGTTTTCTTTGGCGGTCGTTGGCCTGAACATCACATCACTGGGGCTGCGTTCCCTCAAGGAGATCAGTGATGGGGATGTGATCATTTCTGGAAACCGAAATTTGTGCTACGCAAACACAATAAACTGGAAAAAACTCTTCGGGACACCCAATCAGAAAACCAAAATCATGAACAACAGAGCTGAGAAAGACTGCAAGGCCGTGAACCACGTCTGCAATCCTTTATGCTCCTCGGAAGGCTGCTGGGGCCCTGAGCCCAGGGACTGTGTCTCCTGCCAGAATGTGAGCAGAGGCAGGGAGTGCGTGGAGAAATGCAACATCCTGGAGGGGGAACCAAGGGAGTTTGTGGAAAATTCTGAATGCATCCAGTGCCATCCAGAATGTCTGCCCCAGGCCATGAACATCACCTGTACAGGCAGGGGACCAGACAACTGCATCCAGTGTGCCCACTACATTGATGGCCCACACTGTGTCAAGACCTGCCCAGCTGGCATCATGGGAGAGAACAACACTCTGGTCTGGAAGTATGCAGATGCCAATAATGTCTGCCACCTATGCCACGCCAACTGTACCTATGGATGTGCTGGGCCAGGTCTTCAAGGATGTGAAGTGTGGCCATCTGGGTACGTTCAATGGCAGTGGATCTTAAAGACCTTTTGGATCTAA'
nm_id = 'NM_007912.4'


nm_id = 'NM_008960.2'

# class estDsir(unittest.TestCase):
#     def setUp(self):
#         self.asd= AutomatedSirnaDesigner(nm_id, cds_seq)

#     def tearDown(self):
#         pass

#     def test_dsir(self):
#         predicted = self.asd.run()
#         store = []
#         print predicted
#         for i in predicted:
#             try:
#                 pick_rna(i[3])
#                 store.append(i)
#             except:
#                 pass
#         self.assertTrue(len(store))

class Testflow(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_flow(self):
        cds_seq = CdsGetter(nm_id).run()
        self.assertTrue(len(cds_seq))
        self.assertTrue(isinstance(cds_seq, str))
        asd = AutomatedSirnaDesigner(nm_id, cds_seq)
        predicted = asd.run()
        shrnas = AddFifthOftheStrand(cds_seq, predicted).run()
        import ipdb;ipdb.set_trace()
        print sense, guide


if __name__ == '__main__':
    unittest.main()
